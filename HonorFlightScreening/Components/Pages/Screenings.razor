@page "/screenings"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using HonorFlightScreening.Data
@using HonorFlightScreening.Services
@attribute [Authorize]
@inject VeteranScreeningService ScreeningService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Veteran Screenings</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0 text-primary">
                    <i class="fas fa-clipboard-list me-2"></i>
                    Veteran Screenings
                </h1>
                <button class="btn btn-primary" @onclick="CreateNewScreening">
                    <i class="fas fa-plus me-2"></i>
                    New Screening
                </button>
            </div>

            @if (screenings == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!screenings.Any())
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No screenings found</h5>
                        <p class="text-muted">Create your first veteran screening to get started.</p>
                        <button class="btn btn-primary" @onclick="CreateNewScreening">
                            <i class="fas fa-plus me-2"></i>
                            Create First Screening
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var screening in screenings)
                    {
                        <div class="col-12 col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 screening-card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <strong class="text-primary">@screening.VeteranName</strong>
                                    <span class="badge @GetStatusBadgeClass(screening.Status)">
                                        @screening.Status
                                    </span>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-12">
                                            <small class="text-muted d-block">Created</small>
                                            <p class="mb-2">@screening.CreatedDate.ToString("MMM dd, yyyy")</p>
                                        </div>
                                        <div class="col-12">
                                            <small class="text-muted d-block">Last Modified</small>
                                            <p class="mb-2">@screening.LastModified.ToString("MMM dd, yyyy HH:mm")</p>
                                        </div>
                                        @if (!string.IsNullOrEmpty(screening.Notes))
                                        {
                                            <div class="col-12">
                                                <small class="text-muted d-block">Notes</small>
                                                <p class="text-truncate">@screening.Notes</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-primary btn-sm" 
                                                @onclick="() => EditScreening(screening.Id)">
                                            <i class="fas fa-edit me-1"></i>
                                            Edit
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => DeleteScreening(screening.Id)">
                                            <i class="fas fa-trash me-1"></i>
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<VeteranScreening>? screenings;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.Identity?.Name;
        
        if (!string.IsNullOrEmpty(currentUserId))
        {
            screenings = await ScreeningService.GetUserScreeningsAsync(currentUserId);
        }
    }

    private async Task CreateNewScreening()
    {
        await Task.Run(() => Navigation.NavigateTo("/screening/new"));
    }

    private void EditScreening(int id)
    {
        Navigation.NavigateTo($"/screening/{id}");
    }

    private async Task DeleteScreening(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this screening?");
        if (confirmed && !string.IsNullOrEmpty(currentUserId))
        {
            await ScreeningService.DeleteScreeningAsync(id, currentUserId);
            screenings = await ScreeningService.GetUserScreeningsAsync(currentUserId);
            StateHasChanged();
        }
    }

    private static string GetStatusBadgeClass(ScreeningStatus status)
    {
        return status switch
        {
            ScreeningStatus.InProgress => "bg-warning text-dark",
            ScreeningStatus.Completed => "bg-success",
            ScreeningStatus.Reviewed => "bg-info",
            _ => "bg-secondary"
        };
    }
}